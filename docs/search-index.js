var searchIndex = new Map(JSON.parse('[\
["interust",{"t":"PPPPPPPPPPPPPPPPPPPPPPPPFFPPGPPPPIPPPPPPPPPGPCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNPPPPPPPPPPPPPPPGPPPGPPPFPPPPPPGPPPPPGPPPPPPPPPPPPTTPGGPPPPPTGPPPGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOPPGPPPPPPPPFGPPNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNN","n":["Ampersand","Assign","Bool","Bool","CallMember","CallStaticMember","Class","CloseBrace","CloseBracket","CloseParen","Colon","Comma","Comment","EOF","Else","Error","F64","F64","Fn","For","I64","I64","Identifier","If","InterustCompiler","InterustScript","Let","Null","Object","OpenBrace","OpenBracket","OpenParen","Operator","Program","Public","Ref","Return","ReturnType","ReturnValue","SelfKeyword","Semicolon","String","String","Token","While","ast","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_compiled_fn","call_compiled_var","clone","clone","clone_into","clone_into","eq","eq","eval_program","eval_string","export","export_from_program","export_from_str","export_from_tokens","fmt","fmt","fmt","from","from","from","from","get_type","import_compiled","into","into","into","into","new","new","parse","print","reset","reset_interpreter","reset_program","run_interpreter","script","to_owned","to_owned","to_string","tokenize","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","And","Assign","Bit","BitAnd","BitOr","Bool","Bool","Bool","Call","Call","CallMember","CallStaticMember","Class","Class","ClassInstance","ClassMember","Divide","Equal","Equals","Expression","Expression","F64","F64","FieldAccess","Fn","GreaterThan","I64","I64","Identifier","If","Infix","Infix","Insert","LessGreater","LessThan","Let","Literal","Literal","Lowest","Method","Minus","Minus","Mod","Multiply","None","None","Not","NotEqual","Or","PRIVATE","PUBLIC","Plus","Precedence","Prefix","Prefix","Prefix","Product","Ref","Return","STATIC","Statement","String","String","Sum","Type","Variable","Variable","bitor","bitor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_type","hash","into","into","into","into","into","into","into","into","into","is_public","is_static","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","alternative","arguments","call","call","condition","consequence","expression","identifier","identifier","identifier","identifier","inits","variable","body","expression","identifier","identifier","members","parameters","return_type","variable","Bool","Bool","Constant","Error","F64","F64","Fn","I64","I64","None","Null","Scope","ScriptObejct","String","String","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","table","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"interust"],[106,"interust::ast"],[294,"interust::ast::Expression"],[307,"interust::ast::Statement"],[315,"interust::script"],[370,"alloc::string"],[371,"alloc::vec"],[372,"core::option"],[373,"core::fmt"],[374,"core::result"],[375,"core::any"],[376,"core::cmp"],[377,"core::hash"]],"i":[8,8,8,9,8,8,8,8,8,8,8,8,8,8,8,9,8,9,8,8,8,9,8,8,0,0,8,9,0,8,8,8,8,0,8,9,8,8,9,8,8,8,9,0,8,0,12,3,8,9,12,3,8,9,3,3,8,9,8,9,8,9,12,12,12,12,12,12,8,9,9,12,3,8,9,9,3,12,3,8,9,12,3,12,3,12,12,12,12,0,8,9,9,12,12,3,8,9,12,3,8,9,12,3,8,9,22,26,26,22,22,21,17,26,25,26,25,25,17,24,25,0,22,22,26,0,24,21,17,0,24,22,21,17,25,25,0,25,25,26,22,24,0,25,26,27,22,23,22,22,21,17,23,22,22,20,20,22,0,0,25,26,26,17,24,20,0,21,17,26,0,25,27,20,20,21,17,22,23,24,25,26,20,27,21,17,22,23,24,25,26,20,27,21,17,22,23,24,25,26,20,27,21,17,22,23,24,25,26,20,27,17,17,21,17,22,23,24,25,26,20,27,21,17,17,22,22,23,24,25,20,27,21,17,22,23,24,25,26,20,27,21,17,21,17,22,23,24,25,26,20,27,20,20,17,26,21,17,22,23,24,25,26,20,27,17,22,21,17,22,23,24,25,26,20,27,21,17,22,23,24,25,26,20,27,21,17,22,23,24,25,26,20,27,32,33,34,35,32,32,36,33,34,35,37,37,36,38,39,38,40,40,38,38,39,5,30,0,5,5,30,5,5,30,30,5,0,0,5,30,5,30,31,5,30,31,5,30,31,5,30,31,5,30,31,5,5,30,31,5,30,31,5,30,31,31,31,5,30,31,5,5,30,31,5,30,31,5,30,31],"f":"``````````````````````````````````````````````{{{b{c}}}{{b{e}}}{}{}}000{{{b{dc}}}{{b{de}}}{}{}}000{{{b{df}}h{l{j}}}{{n{j}}}}{{{b{df}}h}j}{{{b{A`}}}A`}{{{b{Ab}}}Ab}{{{b{c}}{b{de}}}Ad{}{}}0{{{b{A`}}{b{A`}}}Af}{{{b{Ab}}{b{Ab}}}Af}{{{b{dAh}}Aj}{{n{Ab}}}}{{{b{dAh}}{b{Al}}}{{n{Ab}}}}{{{b{dAh}}{b{Al}}}Ad}{{{b{dAh}}{b{Al}}Aj}Ad}{{{b{dAh}}{b{Al}}{b{Al}}}Ad}{{{b{dAh}}{b{Al}}{b{{l{A`}}}}}Ad}{{{b{A`}}{b{dAn}}}B`}{{{b{Ab}}{b{dAn}}}B`}0{cc{}}000{{{b{Ab}}}Bb}{{{b{df}}{b{Al}}}Ad}{ce{}{}}000{{}Ah}{{}f}{{{b{Ah}}{b{{l{A`}}}}}Aj}{{{b{f}}}Ad}{{{b{dAh}}}Ad}00{{{b{dAh}}}{{n{Ab}}}}`{{{b{c}}}e{}{}}0{{{b{c}}}h{}}{{{b{Ah}}{b{Al}}}{{l{A`}}}}{c{{Bd{e}}}{}{}}0000000{{{b{c}}}Bf{}}000```````````````````````````````````````````````````````````````````{{BhBh}c{}}{{{b{dBh}}Bh}Ad}{{{b{c}}}{{b{e}}}{}{}}00000000{{{b{dc}}}{{b{de}}}{}{}}00000000{{{b{Bj}}}Bj}{{{b{Bb}}}Bb}{{{b{Bl}}}Bl}{{{b{Bn}}}Bn}{{{b{C`}}}C`}{{{b{Cb}}}Cb}{{{b{Cd}}}Cd}{{{b{Bh}}}Bh}{{{b{Cf}}}Cf}{{{b{c}}{b{de}}}Ad{}{}}00000000{{{b{Bb}}{b{Bb}}}Ch}{{{b{Bb}}}Ab}{{{b{Bj}}{b{Bj}}}Af}{{{b{Bb}}{b{Bb}}}Af}{{{b{Bl}}{b{Bl}}}Af}{{{b{Bn}}{b{Bn}}}Af}{{{b{C`}}{b{C`}}}Af}{{{b{Cb}}{b{Cb}}}Af}{{{b{Cd}}{b{Cd}}}Af}{{{b{Bh}}{b{Bh}}}Af}{{{b{Cf}}{b{Cf}}}Af}{{{b{Bj}}{b{dAn}}}B`}{{{b{Bb}}{b{dAn}}}B`}0{{{b{Bl}}{b{dAn}}}B`}0{{{b{Bn}}{b{dAn}}}B`}{{{b{C`}}{b{dAn}}}B`}{{{b{Cb}}{b{dAn}}}B`}{{{b{Bh}}{b{dAn}}}B`}{{{b{Cf}}{b{dAn}}}B`}{cc{}}00000000{{{b{Bj}}}Bb}{{{b{Bb}}{b{dc}}}AdCj}{ce{}{}}00000000{{{b{Bh}}}Af}0{{{b{Bb}}{b{Bb}}}{{n{Ch}}}}{{{b{Cd}}{b{Cd}}}{{n{Ch}}}}{{{b{c}}}e{}{}}00000000{{{b{c}}}h{}}0{c{{Bd{e}}}{}{}}00000000000000000{{{b{c}}}Bf{}}00000000````````````````````````````````````{{{b{c}}}{{b{e}}}{}{}}00{{{b{dc}}}{{b{de}}}{}{}}00{{{b{j}}}j}{{{b{Cl}}}Cl}{{{b{Cn}}}Cn}{{{b{c}}{b{de}}}Ad{}{}}00{{{b{j}}{b{j}}}Af}{{{b{Cl}}{b{Cl}}}Af}{{{b{Cn}}{b{Cn}}}Af}{{{b{j}}{b{dAn}}}B`}0{{{b{Cl}}{b{dAn}}}B`}{{{b{Cn}}{b{dAn}}}B`}{cc{}}00{ce{}{}}00{{}Cn}`{{{b{c}}}e{}{}}00{{{b{c}}}h{}}{c{{Bd{e}}}{}{}}00000{{{b{c}}}Bf{}}00","D":"Hf","p":[[1,"reference"],[0,"mut"],[5,"InterustScript",0],[5,"String",370],[6,"ScriptObejct",315],[5,"Vec",371],[6,"Option",372],[6,"Token",0],[6,"Object",0],[1,"unit"],[1,"bool"],[5,"InterustCompiler",0],[8,"Program",0],[1,"str"],[5,"Formatter",373],[8,"Result",373],[6,"Type",106],[6,"Result",374],[5,"TypeId",375],[5,"FieldAccess",106],[6,"Literal",106],[6,"Infix",106],[6,"Prefix",106],[6,"Statement",106],[6,"Expression",106],[6,"Precedence",106],[6,"ClassMember",106],[6,"Ordering",376],[10,"Hasher",377],[6,"Constant",315],[5,"Scope",315],[15,"If",294],[15,"Call",294],[15,"CallMember",294],[15,"CallStaticMember",294],[15,"Insert",294],[15,"ClassInstance",294],[15,"Fn",307],[15,"Let",307],[15,"Class",307]],"r":[],"b":[[69,"impl-Display-for-Object"],[70,"impl-Debug-for-Object"],[223,"impl-Display-for-Type"],[224,"impl-Debug-for-Type"],[225,"impl-Debug-for-Infix"],[226,"impl-Display-for-Infix"],[345,"impl-Display-for-ScriptObejct"],[346,"impl-Debug-for-ScriptObejct"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAC8BGAABABcAGwABAB4ADQAtAAAALwAHADkABQBCAAUATAAAAFsAAgBfABoAewACAH8AAgCDAAUAigAEAJAADgChAAUAqAACAKwAPADyAAEA/QBAAD8BBwBJARQAZAEAAGYBDAA="}],\
["rustc_hash",{"t":"FIIIIFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["FxBuildHasher","FxHashMap","FxHashMapSeed","FxHashSet","FxHashSetSeed","FxHasher","FxSeededState","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_hasher","build_hasher","clone","clone","clone_into","clone_into","default","default","default","finish","from","from","from","into","into","into","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_seed","with_seed","write","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize"],"q":[[0,"rustc_hash"],[49,"rustc_hash::seeded_state"],[50,"core::result"],[51,"core::any"]],"i":[0,0,0,0,0,0,0,3,5,4,3,5,4,3,4,5,4,5,4,5,5,4,5,3,5,4,3,5,4,5,4,3,5,4,3,5,4,3,5,4,3,5,5,5,5,5,5,5,5],"f":"```````{{{b{c}}}{{b{e}}}{}{}}00{{{b{dc}}}{{b{de}}}{}{}}00{{{b{f}}}c{}}{{{b{h}}}j}{{{b{j}}}j}{{{b{h}}}h}{{{b{c}}{b{de}}}l{}{}}0{{}j}0{{}h}{{{b{j}}}n}{cc{}}00{ce{}{}}00{{{b{c}}}e{}{}}0{c{{A`{e}}}{}{}}00000{{{b{c}}}Ab{}}00{Adf}{Adj}{{{b{dj}}{b{{Ah{Af}}}}}l}{{{b{dj}}Aj}l}{{{b{dj}}Al}l}{{{b{dj}}An}l}{{{b{dj}}n}l}{{{b{dj}}Af}l}{{{b{dj}}Ad}l}","D":"Bb","p":[[1,"reference"],[0,"mut"],[5,"FxSeededState",0,49],[5,"FxBuildHasher",0],[5,"FxHasher",0],[1,"unit"],[1,"u64"],[6,"Result",50],[5,"TypeId",51],[1,"usize"],[1,"u8"],[1,"slice"],[1,"u128"],[1,"u16"],[1,"u32"]],"r":[[2,49],[4,49],[6,49]],"b":[[19,"impl-Default-for-FxHasher"],[20,"impl-FxHasher"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACAABAAIAAwAFgABAB4ACgArAAYA"}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
