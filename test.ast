[
    Class {
        identifier: "Test",
        members: [
            Variable(false, Variable("private", I64)),
            Variable(true, Variable("public", F64)),
            Method(true, true, Fn {
                identifier: "new",
                return_type: Class("Test"),
                parameters: [],
                body: [
                    Return(ClassInstance {
                        identifier: "Test",
                        inits: [
                            Insert {
                                variable: Identifier("private"),
                                expression: Literal(I64(0))
                            },
                            Insert {
                                variable: Identifier("public"),
                                expression: Literal(I64(0))
                            }
                        ]
                    })
                ]
            }),
            Method(true, false, Fn {
                identifier: "add",
                return_type: F64,
                parameters: [
                    Variable("self", Ref(Class("Test")))
                ],
                body: [
                    Expression(Insert {
                        variable: CallMember {
                            from: Identifier("self"),
                            call: Identifier("public")
                        },
                        expression: Infix(Plus, CallMember {
                            from: Identifier("self"),
                            call: Call { function: Identifier("multi"), arguments: [] }
                        }, Literal(I64(1)))
                    }),
                    Return(CallMember {
                        from: Identifier("self"),
                        call: Identifier("public")
                    })
                ]
            }),
            Method(false, false, Fn {
                identifier: "multi",
                return_type: None,
                parameters: [
                    Variable("self", Ref(Class("Test")))
                ],
                body: [
                    Expression(Insert {
                        variable: CallMember {
                            from: Identifier("self"),
                            call: Identifier("public")
                        },
                        expression: Infix(Multiply, CallMember { from: Identifier("self"), call: Identifier("public") }, Literal(I64(5)))
                    })
                ]
            })
        ]
    },
    Let {
        variable: Variable("a", Class("Test")),
        expression: Some(CallMember { identifier: "Test", call: Call { function: Identifier("new"), arguments: [] } })
    },
    Expression(CallMember { identifier: "a", call: Call { function: Identifier("add"), arguments: [] } })
]